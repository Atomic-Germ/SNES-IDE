name: CI

on:
  push:
    branches: [ main, feat/**, devel/*, bugfix/** ]
    tags: ['v*']
  pull_request:
    branches: [ main, devel ]

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel
        python -m pip install PyInstaller

    - name: Run Windows build script
      shell: pwsh
      run: |
        # Prefer the PowerShell build script when available; fall back to the batch script
        if (Test-Path './build/build.ps1') {
          Write-Host "Found build.ps1, running with PowerShell..."
          & './build/build.ps1'
        } elseif (Test-Path './build/build.bat') {
          Write-Host "Falling back to build.bat via cmd..."
          cmd /c '.\\build\\build.bat'
        } else {
          Write-Error 'No build script found (build.ps1 or build.bat)'
          exit 1
        }
        

    - name: Verify build output
      shell: pwsh
      run: |
        Write-Host "Listing SNES-IDE-out contents"
        if (Test-Path -Path 'SNES-IDE-out') {
          Get-ChildItem -Path 'SNES-IDE-out' -Recurse -Name
        } else {
          Write-Host "SNES-IDE-out not found"
        }

    - name: Compress SNES-IDE-out
      shell: pwsh
      run: |
        if (Test-Path -Path 'SNES-IDE-out') {
          Remove-Item -Path 'SNES-IDE-out.zip' -ErrorAction SilentlyContinue
          Compress-Archive -Path 'SNES-IDE-out\*' -DestinationPath 'SNES-IDE-out.zip' -Force
          Write-Host "Created SNES-IDE-out.zip"
        } else {
          Write-Error "SNES-IDE-out directory missing"
        }

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: sneside-out
        path: SNES-IDE-out.zip
        retention-days: 7

  test-windows:
    name: Test Windows build
    needs: build-windows
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python for tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Download build artifact
      uses: actions/download-artifact@v5
      with:
        name: sneside-out
        path: .

    - name: Extract build artifact
      shell: pwsh
      run: |
        $zip = Get-ChildItem -Path . -Filter '*.zip' -Recurse | Select-Object -First 1
        if ($null -eq $zip) { Write-Error "No zip artifact found"; exit 1 }
        Write-Host "Extracting $($zip.FullName)"
        Expand-Archive -LiteralPath $zip.FullName -DestinationPath './SNES-IDE-out' -Force

    - name: Run test script (runs INSTALL.bat if present)
      shell: pwsh
      run: |
        python -u tests/test.py > tests.log 2>&1
        $exitCode = $LASTEXITCODE
        Write-Host "Test run finished with exit code $exitCode"
        if ($exitCode -ne 0) { Write-Host 'Tests failed' ; exit $exitCode }

    - name: Upload test logs (on failure or success)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: tests.log
        retention-days: 7

  pwsh-smoke:
    name: PowerShell smoke test
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel
        python -m pip install PyInstaller

    - name: Run PowerShell build and test flow
      shell: pwsh
      run: |
        if (Test-Path './build/build.ps1') {
          Write-Host "Running build.ps1"
          & './build/build.ps1'
        } else {
          Write-Host "No build.ps1 found; skipping pwsh smoke build"
          exit 1
        }

        # Ensure tests run from repository root so tests-pwsh.log is created at the workspace root
        Set-Location -Path $env:GITHUB_WORKSPACE

        # Run test harness which prefers INSTALL.ps1 when pwsh is available
        python -u tests/test.py > tests-pwsh.log 2>&1
        $exitCode = $LASTEXITCODE
        Write-Host "PWsh test run finished with exit code $exitCode"
        if ($exitCode -ne 0) { Write-Error 'PWsh tests failed' ; exit $exitCode }

    - name: Upload pwsh test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pwsh-test-logs
        path: tests-pwsh.log
        retention-days: 7
