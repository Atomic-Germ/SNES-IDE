name: macOS Red-light Tests

on:
  push:
    branches: [ devel/macOS ]
  pull_request:
    branches: [ main, devel/macOS ]
  workflow_dispatch: {}

jobs:
  test-macos:
    name: Run macOS red-light tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Ensure Homebrew is available
        run: |
          # macOS runners typically have Homebrew; ensure it's healthy
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update || true

      - name: Install macOS system deps (tcl-tk, powershell where possible)
        run: |
          # Install tcl-tk to support tkinter-based tests and GUI
          brew list tcl-tk || brew install tcl-tk
          # Install PowerShell (pwsh) to allow .ps1 script execution on macOS
          brew list powershell || brew install powershell || true

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project runtime deps (pyinstaller) but keep tests separated
          python -m pip install -r requirements.txt || true
          # Install pytest explicitly for CI tests
          python -m pip install pytest

      - name: Download native bsnes macOS binary
        id: bsnes_download
        run: |
          set -e
          mkdir -p libs/bsnes/mac
          # Download the nightly macOS build directly from the bsnes releases 'nightly' tag.
          # This avoids API parsing and ensures we fetch the known macOS artifact.
          URL="https://github.com/bsnes-emu/bsnes/releases/download/nightly/bsnes-macos.zip"
          echo "Downloading $URL"
          curl -fLS -o libs/bsnes/mac/bsnes-macos.zip "$URL"
          echo "Downloaded to libs/bsnes/mac/bsnes-macos.zip"

      - name: Unpack bsnes (mac)
        run: |
          cd libs/bsnes/mac && if [ -f bsnes-macos.zip ]; then unzip -o bsnes-macos.zip || true; fi

      - name: Download pvsneslib devkitsnes (prebuilt 4.4.0 darwin)
        id: pvsnes_download
        run: |
          set -e
          mkdir -p libs/pvsneslib
          # Download the prebuilt binary archive for pvsneslib 4.4.0 for macOS (darwin)
          URL="https://github.com/alekmaul/pvsneslib/releases/download/4.4.0/pvsneslib_440_64b_darwin.zip"
          echo "Downloading prebuilt pvsneslib from $URL"
          curl -fLS -o /tmp/pvsneslib-4.4.0-bin.zip "$URL"
          unzip -q /tmp/pvsneslib-4.4.0-bin.zip -d /tmp
          # Locate any extracted devkitsnes directory under /tmp and copy it into libs/
          DEVKIT_SRC=$(find /tmp -type d -name devkitsnes -print -quit || true)
          if [ -n "$DEVKIT_SRC" ]; then
            echo "Found devkitsnes at $DEVKIT_SRC; copying to libs/pvsneslib/devkitsnes"
            rm -rf libs/pvsneslib/devkitsnes || true
            mkdir -p libs/pvsneslib
            cp -R "$DEVKIT_SRC" libs/pvsneslib/
            echo "Copied devkitsnes to libs/pvsneslib/devkitsnes"
          else
            echo "devkitsnes directory not found in the prebuilt archive; please verify the prebuilt release contains devkitsnes"
            exit 1
          fi

      - name: Verify devkitsnes executables or build from source
        id: devkits_verify
        run: |
          set -e
          # Look for common devkits executables (with or without .exe)
          DEVKIT_DIR="libs/pvsneslib/devkitsnes"
          echo "Checking for devkits executables in $DEVKIT_DIR"
          if [ -d "$DEVKIT_DIR" ]; then
            FOUND=$(find "$DEVKIT_DIR" -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -print -quit || true)
          else
            FOUND=""
          fi

          if [ -n "$FOUND" ]; then
            echo "Found devkit executable: $FOUND"
            chmod -R +x "$DEVKIT_DIR" || true
          else
            echo "No devkit executables found â€” attempting to build devkitsnes from source"
            # Try common build strategies inside the extracted tmp directory
            if [ -d /tmp/pvsneslib-4.4.0/devkitsnes ]; then
              cd /tmp/pvsneslib-4.4.0/devkitsnes
              # Try waf-based build
              if [ -f waf ]; then
                echo "Building with waf"
                python3 waf configure --prefix=/tmp/pvsneslib-install || true
                python3 waf build || true
                python3 waf install --destdir=/tmp/pvsneslib-install || true
                # Copy any produced binaries into libs path
                mkdir -p libs/pvsneslib/devkitsnes
                cp -R /tmp/pvsneslib-install/* libs/pvsneslib/devkitsnes/ || true
              elif [ -f Makefile ]; then
                echo "Building with make"
                make || true
                mkdir -p libs/pvsneslib/devkitsnes
                # heuristically copy likely binaries
                find . -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -exec cp {} libs/pvsneslib/devkitsnes/ \; || true
              elif [ -f configure ]; then
                echo "Configuring + make"
                ./configure --prefix=/tmp/pvsneslib-install || true
                make || true
                make install DESTDIR=/tmp/pvsneslib-install || true
                mkdir -p libs/pvsneslib/devkitsnes
                cp -R /tmp/pvsneslib-install/* libs/pvsneslib/devkitsnes/ || true
              else
                echo "No known build system found in devkitsnes; cannot build automatically"
                exit 1
              fi

              # Final check for executables after build attempts
              FOUND2=$(find "libs/pvsneslib/devkitsnes" -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -print -quit || true)
              if [ -n "$FOUND2" ]; then
                echo "Build produced devkit executable: $FOUND2"
                chmod -R +x libs/pvsneslib/devkitsnes || true
              else
                echo "Build did not produce expected executables; red-light remains"
                exit 1
              fi
            else
              echo "No source tree available to build devkitsnes; red-light remains"
              exit 1
            fi
          fi

      - name: Run tests (red-light)
        run: |
          echo "Running intentionally-failing red-light tests for macOS port"
          python -m pytest -q
