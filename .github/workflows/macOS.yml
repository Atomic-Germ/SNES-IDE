name: macOS Red-light Tests

on:
  push:
    branches: [ devel/macOS ]
  pull_request:
    branches: [ main, devel/macOS ]
  workflow_dispatch: {}

jobs:
  test-macos:
    name: Run macOS red-light tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Ensure Homebrew is available
        run: |
          # macOS runners typically have Homebrew; ensure it's healthy
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update || true

      - name: Debug Homebrew environment
        run: |
          echo "Initial PATH: $PATH"
          echo "Checking common brew locations"
          if [ -x "/opt/homebrew/bin/brew" ]; then
            echo "Found brew in /opt/homebrew/bin"
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          if [ -x "/usr/local/bin/brew" ]; then
            echo "Found brew in /usr/local/bin"
            eval "$(/usr/local/bin/brew shellenv)"
          fi
          echo "After shellenv PATH: $PATH"
          which brew || true
          brew --version || true

      - name: Install macOS system deps (tcl-tk, powershell where possible)
        run: |
          # Install tcl-tk to support tkinter-based tests and GUI
          brew list tcl-tk || brew install tcl-tk
          # Install PowerShell (pwsh) to allow .ps1 script execution on macOS
          brew list powershell || brew install powershell || true

      - name: Install VS Code (CLI) for editor detection
        run: |
          # Install the VS Code cask so the 'code' CLI is available for editor integration tests
          brew list --cask visual-studio-code || brew install --cask visual-studio-code || true
          # If 'code' isn't on PATH after install, create a safe symlink
          if ! command -v code >/dev/null 2>&1; then
            if [ -f "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ]; then
              sudo ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code || true
            fi
          fi
          # Show version for debug purposes
          code --version || true

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project runtime deps (pyinstaller) but keep tests separated
          python -m pip install -r requirements.txt || true
          # Install pytest explicitly for CI tests
          python -m pip install pytest

      - name: Download native bsnes macOS binary
        id: bsnes_download
        run: |
          set -e
          mkdir -p libs/bsnes/mac
          # Download the nightly macOS build directly from the bsnes releases 'nightly' tag.
          # This avoids API parsing and ensures we fetch the known macOS artifact.
          URL="https://github.com/bsnes-emu/bsnes/releases/download/nightly/bsnes-macos.zip"
          echo "Downloading $URL"
          curl -fLS -o libs/bsnes/mac/bsnes-macos.zip "$URL"
          echo "Downloaded to libs/bsnes/mac/bsnes-macos.zip"

      - name: Unpack bsnes (mac)
        run: |
          cd libs/bsnes/mac && if [ -f bsnes-macos.zip ]; then unzip -o bsnes-macos.zip || true; fi

      - name: Download pvsneslib devkitsnes (prebuilt 4.4.0 darwin)
        id: pvsnes_download
        run: |
          set -e
          mkdir -p libs/pvsneslib
          # Download the prebuilt binary archive for pvsneslib 4.4.0 for macOS (darwin)
          URL="https://github.com/alekmaul/pvsneslib/releases/download/4.4.0/pvsneslib_440_64b_darwin.zip"
          echo "Downloading prebuilt pvsneslib from $URL"
          curl -fLS -o /tmp/pvsneslib-4.4.0-bin.zip "$URL"
          # Extract into a dedicated directory to avoid polluting /tmp root and make detection reliable
          EXTRACT_DIR=/tmp/pvsneslib-extract
          rm -rf "$EXTRACT_DIR" || true
          mkdir -p "$EXTRACT_DIR"
          unzip -q /tmp/pvsneslib-4.4.0-bin.zip -d "$EXTRACT_DIR"
          echo "Listing extracted tree (first 200 lines):"
          find "$EXTRACT_DIR" -maxdepth 3 -print | sed -n '1,200p'

          # Locate any extracted devkitsnes directory under the extraction dir and copy it into libs/
          DEVKIT_SRC=$(find "$EXTRACT_DIR" -type d -name devkitsnes -print -quit || true)
          if [ -n "$DEVKIT_SRC" ]; then
            echo "Found devkitsnes at $DEVKIT_SRC; copying to libs/pvsneslib/devkitsnes"
            rm -rf libs/pvsneslib/devkitsnes || true
            mkdir -p libs/pvsneslib
            cp -R "$DEVKIT_SRC" libs/pvsneslib/
            echo "Copied devkitsnes to libs/pvsneslib/devkitsnes"
          else
            # First check for the canonical path produced by the release: EXTRACT_DIR/pvsneslib/devkitsnes
            if [ -d "$EXTRACT_DIR/pvsneslib/devkitsnes" ]; then
              DEVKIT_SRC="$EXTRACT_DIR/pvsneslib/devkitsnes"
              echo "Found canonical devkitsnes at $DEVKIT_SRC; copying to libs/pvsneslib/devkitsnes"
              rm -rf libs/pvsneslib/devkitsnes || true
              mkdir -p libs/pvsneslib
              cp -R "$DEVKIT_SRC" libs/pvsneslib/
              echo "Copied devkitsnes to libs/pvsneslib/devkitsnes"
            else
              # If canonical path not present, look for any top-level directory named 'pvsneslib*' and use its devkitsnes
              TOP_PVSNSLIB_DIR=$(find "$EXTRACT_DIR" -maxdepth 1 -type d -name 'pvsneslib*' -print -quit || true)
              if [ -n "$TOP_PVSNSLIB_DIR" ] && [ -d "$TOP_PVSNSLIB_DIR/devkitsnes" ]; then
                DEVKIT_SRC="$TOP_PVSNSLIB_DIR/devkitsnes"
                echo "Found devkitsnes under top-level $TOP_PVSNSLIB_DIR; copying to libs/pvsneslib/devkitsnes"
                rm -rf libs/pvsneslib/devkitsnes || true
                mkdir -p libs/pvsneslib
                cp -R "$DEVKIT_SRC" libs/pvsneslib/
                echo "Copied devkitsnes to libs/pvsneslib/devkitsnes"
              else
                # Fallback: previous file-based search if layout is unexpected
                echo "Canonical pvsneslib/devkitsnes not found — attempting file-based fallback search"
                FOUND_FILE=$(find "$EXTRACT_DIR" -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -print -quit || true)
                if [ -n "$FOUND_FILE" ]; then
                  PARENT_DIR=$(dirname "$FOUND_FILE")
                  echo "Found devkit file $FOUND_FILE; copying parent dir $PARENT_DIR to libs/pvsneslib/devkitsnes"
                  rm -rf libs/pvsneslib/devkitsnes || true
                  mkdir -p libs/pvsneslib
                  cp -R "$PARENT_DIR" libs/pvsneslib/devkitsnes || true
                  echo "Copied fallback devkits into libs/pvsneslib/devkitsnes"
                else
                  echo "devkitsnes directory not found in the prebuilt archive under $EXTRACT_DIR; listing full contents for debug:"
                  find "$EXTRACT_DIR" -type f -print | sed -n '1,500p'
                  exit 1
                fi
              fi
            fi
          fi

      - name: Verify devkitsnes executables or build from source
        id: devkits_verify
        run: |
          set -e
          # Look for common devkits executables (with or without .exe)
          DEVKIT_DIR="libs/pvsneslib/devkitsnes"
          echo "Checking for devkits executables in $DEVKIT_DIR"
          if [ -d "$DEVKIT_DIR" ]; then
            FOUND=$(find "$DEVKIT_DIR" -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -print -quit || true)
          else
            FOUND=""
          fi

          if [ -n "$FOUND" ]; then
            echo "Found devkit executable: $FOUND"
            chmod -R +x "$DEVKIT_DIR" || true
          else
            echo "No devkit executables found — attempting to build devkitsnes from extracted source tree"
            # Try build under the same extraction dir used earlier
            EXTRACT_DIR=/tmp/pvsneslib-extract
            if [ -d "$EXTRACT_DIR" ] && [ -d "$EXTRACT_DIR"/pvsneslib* ]; then
              # Find the top-level extracted subdir
              TOPDIR=$(find "$EXTRACT_DIR" -maxdepth 1 -type d -name "pvsneslib*" -print -quit || true)
              if [ -n "$TOPDIR" ] && [ -d "$TOPDIR/devkitsnes" ]; then
                cd "$TOPDIR/devkitsnes"
                # Try waf-based build
                if [ -f waf ]; then
                  echo "Building with waf"
                  python3 waf configure --prefix=/tmp/pvsneslib-install || true
                  python3 waf build || true
                  python3 waf install --destdir=/tmp/pvsneslib-install || true
                  mkdir -p libs/pvsneslib/devkitsnes
                  cp -R /tmp/pvsneslib-install/* libs/pvsneslib/devkitsnes/ || true
                elif [ -f Makefile ]; then
                  echo "Building with make"
                  make || true
                  mkdir -p libs/pvsneslib/devkitsnes
                  find . -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -exec cp {} libs/pvsneslib/devkitsnes/ \; || true
                elif [ -f configure ]; then
                  echo "Configuring + make"
                  ./configure --prefix=/tmp/pvsneslib-install || true
                  make || true
                  make install DESTDIR=/tmp/pvsneslib-install || true
                  mkdir -p libs/pvsneslib/devkitsnes
                  cp -R /tmp/pvsneslib-install/* libs/pvsneslib/devkitsnes/ || true
                else
                  echo "No known build system found in devkitsnes; cannot build automatically"
                  exit 1
                fi

                FOUND2=$(find "libs/pvsneslib/devkitsnes" -type f \( -iname 'wla-65816*' -o -iname 'wlalink*' -o -iname '816-tcc*' \) -print -quit || true)
                if [ -n "$FOUND2" ]; then
                  echo "Build/Copy produced devkit executable: $FOUND2"
                  chmod -R +x libs/pvsneslib/devkitsnes || true
                else
                  echo "Build did not produce expected executables; red-light remains"
                  exit 1
                fi
              else
                echo "No devkitsnes source tree found under $EXTRACT_DIR; cannot build"
                exit 1
              fi
            else
              echo "No source tree available to build devkitsnes; red-light remains"
              exit 1
            fi
          fi

      - name: Stage Python automatizer for POSIX
        run: |
          set -e
          # Ensure the libs path exists
          mkdir -p libs/pvsneslib/devkitsnes
          # Copy the Python automatizer implementation from the source tree into the libs area
          if [ -f src/libs/pvsneslib/devkitsnes/automatizer.py ]; then
            cp src/libs/pvsneslib/devkitsnes/automatizer.py libs/pvsneslib/devkitsnes/ || true
            echo "Copied automatizer.py into libs/pvsneslib/devkitsnes/"
          else
            echo "Warning: src/libs/pvsneslib/devkitsnes/automatizer.py not found in source tree"
          fi

          # Copy POSIX wrapper if present in the source tree and make it executable
          if [ -f src/libs/pvsneslib/devkitsnes/bin/automatizer.sh ]; then
            mkdir -p libs/pvsneslib/devkitsnes/bin
            cp src/libs/pvsneslib/devkitsnes/bin/automatizer.sh libs/pvsneslib/devkitsnes/bin/automatizer || true
            chmod +x libs/pvsneslib/devkitsnes/bin/automatizer || true
            echo "Staged POSIX wrapper to libs/pvsneslib/devkitsnes/bin/automatizer"
          fi

          # Ensure python3 is available for the automatizer to run in CI
          python3 --version || true

      - name: Run tests (red-light)
        run: |
          echo "Running intentionally-failing red-light tests for macOS port"
          python -m pytest -q
